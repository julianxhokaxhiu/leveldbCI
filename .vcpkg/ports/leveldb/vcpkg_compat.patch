diff --git a/CMakeLists.txt b/CMakeLists.txt
index fda9e01..67c5a12 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,7 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file. See the AUTHORS file for names of contributors.
 
-cmake_minimum_required(VERSION 3.9)
+cmake_minimum_required(VERSION 3.25)
 # Keep the version below in sync with the one in db.h
 project(leveldb VERSION 1.23.0 LANGUAGES C CXX)
 
@@ -16,8 +16,8 @@ endif(NOT CMAKE_C_STANDARD)
 
 # C++ standard can be overridden when this is used as a sub-project.
 if(NOT CMAKE_CXX_STANDARD)
-  # This project requires C++11.
-  set(CMAKE_CXX_STANDARD 11)
+  # This project requires C++17.
+  set(CMAKE_CXX_STANDARD 17)
   set(CMAKE_CXX_STANDARD_REQUIRED ON)
   set(CMAKE_CXX_EXTENSIONS OFF)
 endif(NOT CMAKE_CXX_STANDARD)
@@ -38,9 +38,18 @@ include(CheckIncludeFile)
 check_include_file("unistd.h" HAVE_UNISTD_H)
 
 include(CheckLibraryExists)
-check_library_exists(crc32c crc32c_value "" HAVE_CRC32C)
-check_library_exists(snappy snappy_compress "" HAVE_SNAPPY)
-check_library_exists(zstd zstd_compress "" HAVE_ZSTD)
+if(WITH_CRC32C)
+  find_package(Crc32c CONFIG REQUIRED)
+  set(HAVE_CRC32C 1)
+endif()
+if(WITH_SNAPPY)
+  find_package(Snappy CONFIG REQUIRED)
+  set(HAVE_SNAPPY 1)
+endif()
+if(WITH_ZSTD)
+  find_package(zstd CONFIG REQUIRED)
+  set(HAVE_ZSTD 1)
+endif()
 check_library_exists(tcmalloc malloc "" HAVE_TCMALLOC)
 
 include(CheckCXXSymbolExists)
@@ -109,15 +118,13 @@ include_directories(
   "."
 )
 
-if(BUILD_SHARED_LIBS)
-  # Only export LEVELDB_EXPORT symbols from the shared library.
-  add_compile_options(-fvisibility=hidden)
-endif(BUILD_SHARED_LIBS)
+# Only export LEVELDB_EXPORT symbols from the shared library.
+add_compile_options(-fvisibility=hidden)
 
 # Must be included before CMAKE_INSTALL_INCLUDEDIR is used.
 include(GNUInstallDirs)
 
-add_library(leveldb "")
+add_library(leveldb SHARED "")
 target_sources(leveldb
   PRIVATE
     "${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
@@ -254,13 +261,11 @@ if (NOT HAVE_CXX17_HAS_INCLUDE)
   )
 endif(NOT HAVE_CXX17_HAS_INCLUDE)
 
-if(BUILD_SHARED_LIBS)
-  target_compile_definitions(leveldb
-    PUBLIC
-      # Used by include/export.h.
-      LEVELDB_SHARED_LIBRARY
-  )
-endif(BUILD_SHARED_LIBS)
+target_compile_definitions(leveldb
+  PUBLIC
+    # Used by include/export.h.
+    LEVELDB_SHARED_LIBRARY
+)
 
 if(HAVE_CLANG_THREAD_SAFETY)
   target_compile_options(leveldb
@@ -269,13 +274,13 @@ if(HAVE_CLANG_THREAD_SAFETY)
 endif(HAVE_CLANG_THREAD_SAFETY)
 
 if(HAVE_CRC32C)
-  target_link_libraries(leveldb crc32c)
+  target_link_libraries(leveldb Crc32c::crc32c)
 endif(HAVE_CRC32C)
 if(HAVE_SNAPPY)
-  target_link_libraries(leveldb snappy)
+  target_link_libraries(leveldb Snappy::snappy)
 endif(HAVE_SNAPPY)
 if(HAVE_ZSTD)
-  target_link_libraries(leveldb zstd)
+  target_link_libraries(leveldb zstd::libzstd)
 endif(HAVE_ZSTD)
 if(HAVE_TCMALLOC)
   target_link_libraries(leveldb tcmalloc)
@@ -285,11 +290,6 @@ endif(HAVE_TCMALLOC)
 find_package(Threads REQUIRED)
 target_link_libraries(leveldb Threads::Threads)
 
-add_executable(leveldbutil
-  "db/leveldbutil.cc"
-)
-target_link_libraries(leveldbutil leveldb)
-
 if(LEVELDB_BUILD_TESTS)
   enable_testing()
 
